/*!
* Publisher – Javascript Pub/Sub library
* @license MIT
* © 2015–present Frank Kudermann @ alphanull
*/
/**
 * The publisher module. Provides pub/sub functionality with extensive wildcard support, async/sync publishing, priority and invocation options, content based filtering & more.
 * @module publisher
 * @author Frank Kudermann / alphanull
 * @version 1.6.0
 * @license MIT
 */
const e={async:!0,handleExceptions:!1,lenientUnsubscribe:!1};let n=-1;const t=new Map,i=new Map,o=new Map;function s(e){"function"==typeof queueMicrotask?queueMicrotask(e):"function"==typeof Promise?Promise.resolve().then(e):setTimeout(e,0)}function r(e){return void 0===e}function c({async:n,handleExceptions:t,lenientUnsubscribe:i}={}){r(n)||(e.async=n),r(t)||(e.handleExceptions=t),r(i)||(e.lenientUnsubscribe=i)}function a(n,t,c={}){if(!0===c.persist&&o.set(n,{data:t,options:c}),n.indexOf("*")>-1)throw new Error("Publish topic cannot contain any wildcards.");const a=d(n.split("/"),t,c,i,n);let l;a.sort(((e,n)=>e.priority===n.priority?e.position-n.position:e.priority>n.priority?-1:1));const f=r(c.async)?e.async:c.async;for(;l=a.shift();)if(f)s(u.bind(null,l,n,t,c));else if(!1===u(l,n,t,c)&&!1!==c.cancelable)return!1;return!0}function l(c,a,l={}){const f=n+=1;if(r(c))throw new Error("Subscribe failed - undefined Topic.");if(c.includes("undefined"))throw new Error(`Subscribe for '${c}' failed - found 'undefined' in topic, this is almost always an error: ${f}`);if(r(a))throw new Error(`Subscribe for '${c}' failed - undefined Handler`);const p={token:f,topic:c,handler:a,options:l};if(t.set(f,p),b(c.split("/"),p,i),!0!==l.persist)return f;const d=new RegExp(`^${c.replace("*","(.+)")}(/.+)?$`);for(const[n,t]of o){if(n.match(d)){if(r(t.options.async)?e.async:t.options.async)s(u.bind(null,p,n,t.data,l));else if(!1===u(p,n,t.data,l)&&!0===l.cancelable)break}}return f}function f(n,o,s){const c=o===Boolean(o)?o:s,a=r(c)?e.lenientUnsubscribe:c,l=e=>{const n=t.get(e);if(r(n)){if(!0===a)return;throw new Error(`Unsubscribe failed. Did not find subscriber for token: ${e}`)}h(n.topic.split("/"),n,i),t.delete(e)};if(r(n)){if(!0===a)return;throw new Error("Unsubscribe failed. No Arguments specified.")}if(Array.isArray(n))n.forEach((e=>l(e)));else if(!isNaN(parseFloat(n))&&isFinite(n))l(n);else{if(r(o)){if(!0===a)return;throw new Error(`Unsubscribe failed. No handler for topic based unsubscribe specified ${n}`)}for(const[,e]of t)if(e.handler===o&&e.topic===n){h(n.split("/"),e,i),t.delete(e.token);break}}}function p(e){o.delete(e)}function u(n,i,o,s={}){if(!t.has(n.token))return;n.options.invocations>0&&(n.options.invocations-=1,n.options.invocations<1&&f(n.token));const{handler:r}=n;if(!0!==s.handleExceptions&&!0!==e.handleExceptions)return!0===n.options.topicArg?r(i,o):r(o,i);try{return!0===n.options.topicArg?r(i,o):r(o,i)}catch(e){window.console&&window.console.error&&window.console.error("Exception while executing publish handler: ",e)}}function d(n,t,i={},o,s,c=[]){const a=o.get("subscribers")||new Map,l=o.get("topics");for(const[,n]of a){const{condition:o,topicArg:a}=n.options;(r(o)||(!0===a?!0===o(s,t):!0===o(t,s)))&&(n.position=c.push(n),n.priority=n.options.priority||0,n.async=Boolean(i.async||n.options.async||e.async))}if(n.length&&l){const e=l.get(n[0]),o=l.get("*");r(o)&&r(e)||(r(o)||d(n.slice(1,n.length),t,i,o,s,c),r(e)||d(n.slice(1,n.length),t,i,e,s,c),n.shift())}return c}function b(e,n,t){const[i]=e;r(t.get("topics"))&&t.set("topics",new Map);const o=t.get("topics");let s=o.get(i);r(s)&&(s=new Map,o.set(i,s)),e.length<2?(r(s.get("subscribers"))&&s.set("subscribers",new Map),s.get("subscribers").set(n.token,n)):(e.shift(),b(e,n,s))}function h(e,n,t){const[i]=e,o=t.get("topics"),s=o.get(i),r=s.get("subscribers");e.length<2?(r.delete(n.token),0===r.size&&s.delete("subscribers")):(e.shift(),h(e,n,s)),s.has("topics")&&0===s.get("topics").size&&s.delete("topics"),0===o.get(i).size&&o.delete(i)}export{c as configure,a as publish,p as removePersistentMessage,l as subscribe,f as unsubscribe};
