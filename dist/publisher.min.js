/*!
* Publisher – Javascript Pub/Sub library
* @license MIT
* © 2015–present Frank Kudermann @ alphanull
*/
/**
 * The publisher module. Provides pub/sub functionality with extensive wildcard support, async/sync publishing, priority and invocation options, content based filtering & more.
 * @module publisher
 * @author Frank Kudermann / alphanull
 * @version 1.6.0
 * @license MIT
 */
var e={configure:a,publish:l,subscribe:f,unsubscribe:p,removePersistentMessage:u};const n={async:!0,handleExceptions:!1,lenientUnsubscribe:!1};let t=-1;const i=new Map,o=new Map,s=new Map;function r(e){"function"==typeof queueMicrotask?queueMicrotask(e):"function"==typeof Promise?Promise.resolve().then(e):setTimeout(e,0)}function c(e){return void 0===e}function a({async:e,handleExceptions:t,lenientUnsubscribe:i}={}){c(e)||(n.async=e),c(t)||(n.handleExceptions=t),c(i)||(n.lenientUnsubscribe=i)}function l(e,t,i={}){if(!0===i.persist&&s.set(e,{data:t,options:i}),e.indexOf("*")>-1)throw new Error("Publish topic cannot contain any wildcards.");const a=b(e.split("/"),t,i,o,e);let l;a.sort(((e,n)=>e.priority===n.priority?e.position-n.position:e.priority>n.priority?-1:1));const f=c(i.async)?n.async:i.async;for(;l=a.shift();)if(f)r(d.bind(null,l,e,t,i));else if(!1===d(l,e,t,i)&&!1!==i.cancelable)return!1;return!0}function f(e,a,l={}){const f=t+=1;if(c(e))throw new Error("Subscribe failed - undefined Topic.");if(e.includes("undefined"))throw new Error(`Subscribe for '${e}' failed - found 'undefined' in topic, this is almost always an error: ${f}`);if(c(a))throw new Error(`Subscribe for '${e}' failed - undefined Handler`);const p={token:f,topic:e,handler:a,options:l};if(i.set(f,p),h(e.split("/"),p,o),!0!==l.persist)return f;const u=new RegExp(`^${e.replace("*","(.+)")}(/.+)?$`);for(const[e,t]of s){if(e.match(u)){if(c(t.options.async)?n.async:t.options.async)r(d.bind(null,p,e,t.data,l));else if(!1===d(p,e,t.data,l)&&!0===l.cancelable)break}}return f}function p(e,t,s){const r=t===Boolean(t)?t:s,a=c(r)?n.lenientUnsubscribe:r,l=e=>{const n=i.get(e);if(c(n)){if(!0===a)return;throw new Error(`Unsubscribe failed. Did not find subscriber for token: ${e}`)}w(n.topic.split("/"),n,o),i.delete(e)};if(c(e)){if(!0===a)return;throw new Error("Unsubscribe failed. No Arguments specified.")}if(Array.isArray(e))e.forEach((e=>l(e)));else if(!isNaN(parseFloat(e))&&isFinite(e))l(e);else{if(c(t)){if(!0===a)return;throw new Error(`Unsubscribe failed. No handler for topic based unsubscribe specified ${e}`)}for(const[,n]of i)if(n.handler===t&&n.topic===e){w(e.split("/"),n,o),i.delete(n.token);break}}}function u(e){s.delete(e)}function d(e,t,o,s={}){if(!i.has(e.token))return;e.options.invocations>0&&(e.options.invocations-=1,e.options.invocations<1&&p(e.token));const{handler:r}=e;if(!0!==s.handleExceptions&&!0!==n.handleExceptions)return!0===e.options.topicArg?r(t,o):r(o,t);try{return!0===e.options.topicArg?r(t,o):r(o,t)}catch(e){window.console&&window.console.error&&window.console.error("Exception while executing publish handler: ",e)}}function b(e,t,i={},o,s,r=[]){const a=o.get("subscribers")||new Map,l=o.get("topics");for(const[,e]of a){const{condition:o,topicArg:a}=e.options;(c(o)||(!0===a?!0===o(s,t):!0===o(t,s)))&&(e.position=r.push(e),e.priority=e.options.priority||0,e.async=Boolean(i.async||e.options.async||n.async))}if(e.length&&l){const n=l.get(e[0]),o=l.get("*");c(o)&&c(n)||(c(o)||b(e.slice(1,e.length),t,i,o,s,r),c(n)||b(e.slice(1,e.length),t,i,n,s,r),e.shift())}return r}function h(e,n,t){const[i]=e;c(t.get("topics"))&&t.set("topics",new Map);const o=t.get("topics");let s=o.get(i);c(s)&&(s=new Map,o.set(i,s)),e.length<2?(c(s.get("subscribers"))&&s.set("subscribers",new Map),s.get("subscribers").set(n.token,n)):(e.shift(),h(e,n,s))}function w(e,n,t){const[i]=e,o=t.get("topics"),s=o.get(i),r=s.get("subscribers");e.length<2?(r.delete(n.token),0===r.size&&s.delete("subscribers")):(e.shift(),w(e,n,s)),s.has("topics")&&0===s.get("topics").size&&s.delete("topics"),0===o.get(i).size&&o.delete(i)}export{a as configure,e as default,l as publish,u as removePersistentMessage,f as subscribe,p as unsubscribe};
